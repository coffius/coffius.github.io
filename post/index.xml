<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on KOFF.io</title>
    <link>http://coffius.github.io/post/</link>
    <description>Recent content in Posts on KOFF.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <copyright>(c) 2015</copyright>
    <lastBuildDate>Mon, 16 Apr 2018 10:00:00 +0300</lastBuildDate>
    
	<atom:link href="http://coffius.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sum Data Types with Shapeless</title>
      <link>http://coffius.github.io/posts/shapeless-sums/</link>
      <pubDate>Mon, 16 Apr 2018 10:00:00 +0300</pubDate>
      
      <guid>http://coffius.github.io/posts/shapeless-sums/</guid>
      <description>&lt;p&gt;Scala has support of algebraic data types out of the box but often it is not enough for complex cases.
In this article I will try to show its limits and how to bypass them using &lt;code&gt;shapeless&lt;/code&gt; library by the example of &lt;code&gt;sum data types&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;contents&#34;&gt;Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://coffius.github.io/posts/shapeless-sums/#what-is-adt&#34;&gt;What is ADT?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://coffius.github.io/posts/shapeless-sums/#sealed-trait-as-a-sum-type&#34;&gt;Sealed trait as a sum type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://coffius.github.io/posts/shapeless-sums/#extending-adts-using-wrapper-evidence&#34;&gt;Extending ADTs using Wrapper + Evidence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://coffius.github.io/posts/shapeless-sums/#coproduct-as-a-sum-type&#34;&gt;Coproduct as a sum type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://coffius.github.io/posts/shapeless-sums/#poly1-as-pattern-matching&#34;&gt;Poly1 as pattern matching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://coffius.github.io/posts/shapeless-sums/#merging-sum-types-with-shapeless&#34;&gt;Merging sum types with Shapeless&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HLL counters as Cassandra user defined aggregates</title>
      <link>http://coffius.github.io/posts/hll-in-cassandra/</link>
      <pubDate>Sun, 04 Dec 2016 18:00:00 +0300</pubDate>
      
      <guid>http://coffius.github.io/posts/hll-in-cassandra/</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;../comparison-of-hll&#34;&gt;the previous article&lt;/a&gt; we discussed usage of hll countes for finding the number of unique values in a collection. But in this article we will see how to use them in Cassandra db internally in order to provide such functionality using user defined functions(UDF) and aggregates(UDA).&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tips about variance in scala</title>
      <link>http://coffius.github.io/posts/variance-tip-notes/</link>
      <pubDate>Sat, 26 Nov 2016 22:51:18 +0300</pubDate>
      
      <guid>http://coffius.github.io/posts/variance-tip-notes/</guid>
      <description>&lt;p&gt;Type variance in scala is quite a tricky topic especially if you do not use it often - details might slip out of mind easily in this case. So below you can find very short tips about it which purpose is to remind how it works.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Pagination and Streams</title>
      <link>http://coffius.github.io/posts/pagination-and-streams/</link>
      <pubDate>Sun, 10 Apr 2016 00:20:00 +0300</pubDate>
      
      <guid>http://coffius.github.io/posts/pagination-and-streams/</guid>
      <description>&lt;p&gt;In this article we will see how to use different streams(like akka-stream) for pagination and when it can be useful.
The main idea of pagination is partition of a big sequence of objects into several parts(or pages) in order to make possible its processing page by page.
For example, you have a 1.000.000 users in the database and you need to send an email to all of them.
You could try to load all user records in a big list and process it at once but it would not be memory-efficient approach.
Instead you can partition the list of users into pages by 100 users per page, load one page, send emails to users in this page, load next page and so on.
This will be a much more efficient way to deal with big collections of records.&lt;/p&gt;

&lt;p&gt;So lets try to implement this approach but for a more complex case.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Validation in scala</title>
      <link>http://coffius.github.io/posts/292173-validation-in-scala/</link>
      <pubDate>Fri, 27 Nov 2015 00:11:00 +0300</pubDate>
      
      <guid>http://coffius.github.io/posts/292173-validation-in-scala/</guid>
      <description>&lt;p&gt;This article is about possible solutions for validation in scala. Validation is the process of checking input data in order to provide its correctness and requirements compliance.&lt;/p&gt;

&lt;h1 id=&#34;implementations&#34;&gt;Implementations&lt;/h1&gt;

&lt;p&gt;There are several libraries in scala which can be used for validation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/wix/accord&#34; title=&#34;GitHub: Accord&#34;&gt;Accord&lt;/a&gt;&lt;/strong&gt; - Accord is a validation library written in and for Scala. &lt;a href=&#34;http://wix.github.io/accord/&#34; title=&#34;Accord: Docs&#34;&gt;Docs here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Skinny validator&lt;/strong&gt; - skinny-validator is a portable library, so it is possible to use skinny-validator with Play2, Scalatra and any other web app frameworks. &lt;a href=&#34;http://skinny-framework.org/documentation/validator.html&#34; title=&#34;Skinny Validator: Docs&#34;&gt;Docs here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/tobnee/DValidation/&#34; title=&#34;GitHub: DValidation&#34;&gt;DValidation&lt;/a&gt;&lt;/strong&gt; - A little, opinionated Scala domain object validation toolkit&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/davegurnell/validation&#34; title=&#34;GitHub: io.underscore.validation&#34;&gt;io.underscore.validation&lt;/a&gt;&lt;/strong&gt; - Work-in-progress library demonstrating a functional programming approach to data validation in Scala&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The source code for this article is &lt;strong&gt;&lt;a href=&#34;https://github.com/coffius/koffio-validation&#34;&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using T-Digest: Median calculation and anomaly detection</title>
      <link>http://coffius.github.io/posts/using-t-digest/</link>
      <pubDate>Tue, 13 Oct 2015 22:01:13 +0300</pubDate>
      
      <guid>http://coffius.github.io/posts/using-t-digest/</guid>
      <description>&lt;p&gt;In this article you can find information about using &lt;code&gt;t-digest&lt;/code&gt; library in order to measure average value of some quantity(average session time).
There is also an answer for the question: What and why should you use to make such the measurement mean or median?
Besides, list and comparison of different implementations is presented below in the article.&lt;/p&gt;

&lt;h2 id=&#34;main-problem&#34;&gt;Main problem&lt;/h2&gt;

&lt;p&gt;So in what cases we have need to calculate mean/median? For example we have a site and we want to understand how much time an average user spent on our site.
In order to do it we should calculate an average duration of a user session.
And there are at least two ways to do it - calculate an arithmetic mean(or just mean) or calculate a median.
The calculation of mean is very simple. You need two fields: one for a sum of elements and another for their count. But it doesn`t work very well with anomalies in the data.
I mean the case when one or several elements differ greatly from others.
Lets assume that we have such values for our session durations(in milliseconds):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;3000, 2000, 3000, 5000, 3000, 4000, 4500, 3200, 2700, 3380
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;mean = &lt;code&gt;(3000+2000+3000+5000+3000+4000+4500+3200+2700+3380) / 10 = 3378 msecs&lt;/code&gt;. In this case all is ok.&lt;/p&gt;

&lt;p&gt;But what if one of these users opens the site, forgets to close a browser tab and goes afk for an hour(3.600.000 msecs):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;3000, 2000, 3000, 5000, 3000, 4000, 4500, 3200, 2700, 3600000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;mean = &lt;code&gt;(3000+2000+3000+5000+3000+4000+4500+3200+2700+3600000) / 10 = 363040 msecs&lt;/code&gt;. Just one of the users influences strongly on mean value.
Generally speaking, the mean is only representative if the distribution of the data is symmetric, otherwise it may be heavily influenced by outlying measurements.
In simple cases it is possible to use some kind of a filter.
But often we just don&amp;rsquo;t know what threshold we should use to filter values.
Whereas the median value is the same in both cases and is equal to &lt;code&gt;3100&lt;/code&gt;. So in the cases like this the median will be more useful then the mean.
However the calculation of the median in general case needs a lot of memory - O(n)&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Comparison of HLL implementations</title>
      <link>http://coffius.github.io/posts/comparison-of-hll/</link>
      <pubDate>Tue, 22 Sep 2015 22:01:13 +0300</pubDate>
      
      <guid>http://coffius.github.io/posts/comparison-of-hll/</guid>
      <description>&lt;p&gt;In this article we will look at HLL algorithm and different implementations of it.&lt;/p&gt;

&lt;h2 id=&#34;general-info&#34;&gt;General Info&lt;/h2&gt;

&lt;p&gt;HLL is a propabalistic algorithm which is used for a estimation of unique values.
More details about HLL you can get &lt;a href=&#34;https://en.wikipedia.org/wiki/HyperLogLog&#34; title=&#34;Wikipedia:HyperLogLog&#34;&gt;here&lt;/a&gt;.
The main reason to use HLL is necessity to estimate uniques in very big amount of data in case if it is possible to sacrifice accuracy of an unique counter.&lt;/p&gt;

&lt;h2 id=&#34;list-of-implementations&#34;&gt;List of implementations&lt;/h2&gt;

&lt;p&gt;You can find several implementations of HLL:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/twitter/algebird&#34; title=&#34;twitter/algebird&#34;&gt;twitter/algebird&lt;/a&gt; - a scala library from twitter which contains lots of different algorithms including HLL&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/prasanthj/hyperloglog&#34; title=&#34;prasanthj/hyperloglog&#34;&gt;prasanthj/hyperloglog&lt;/a&gt; - a detached java library for HLL&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/addthis/stream-lib&#34; title=&#34;addthis/stream-lib&#34;&gt;addthis/stream-lib&lt;/a&gt; - another java lib which have an implementation of HLL.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aggregateknowledge/java-hll&#34; title=&#34;java-hll&#34;&gt;aggregateknowledge/java-hll&lt;/a&gt; - a low-level java implementation of HLL&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next in this article we will take a close look at all these libs and answer the question: &amp;laquo;Why should we use HLL?&amp;raquo;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lens in scala</title>
      <link>http://coffius.github.io/posts/292173-lens-in-scala/</link>
      <pubDate>Sat, 19 Sep 2015 22:01:13 +0300</pubDate>
      
      <guid>http://coffius.github.io/posts/292173-lens-in-scala/</guid>
      <description>&lt;p&gt;In this article let&amp;rsquo;s take a look at such a thing as lens(or lenses).
A Lens is an abstraction from functional programming which helps to deal with a problem of updating complex immutable nested objects like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;case class User(id: UserId, generalInfo: GeneralInfo, billInfo: BillInfo)
case class UserId(value: Long)
case class GeneralInfo(email: Email,
                       password: String,
                       siteInfo: SiteInfo,
                       isEmailConfirmed: Boolean = false,
                       phone: String,
                       isPhoneConfirmed: Boolean = false)
case class SiteInfo(alias: String, avatarUrl: String, userRating: Double = 0.0d)
case class Email(value: String)
case class BillInfo(addresses: Seq[Address], name: Name)
case class Name(firstName: String, secondName: String)
case class Address(country: Country, city: City, street: String, house: String, isConfirmed: Boolean = false)
case class City(name: String)
case class Country(name: String)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we want to increase &lt;code&gt;userRating&lt;/code&gt; in this model then we will have to write such a code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val updatedUser = user.copy(
  generalInfo = user.generalInfo.copy(
    siteInfo = user.generalInfo.siteInfo.copy(
      userRating = user.generalInfo.siteInfo.userRating + 1
    )
  )
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we have to write the code below to confirm all of the addresses in BillInfo&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val updatedAddresses = user.billInfo.addresses.map(_.copy(isConfirmed = true))
val updatedUser = user.copy(
	billInfo = user.billInfo.copy(addresses = updatedAddresses)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we increase a level of nesting in our structures then we will considerably increase amount of a code like this. In such cases lens give a cleaner way to make changes in nested structures.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>True fail-fast async error handling with Expression</title>
      <link>http://coffius.github.io/posts/291279-true-fail-fast-with-expression-magic/</link>
      <pubDate>Sat, 12 Sep 2015 22:01:13 +0300</pubDate>
      
      <guid>http://coffius.github.io/posts/291279-true-fail-fast-with-expression-magic/</guid>
      <description>&lt;p&gt;How it was said in the previous &lt;a href=&#34;http://koff.io/posts/290071-make-async-with-scalaz-either-and-futures&#34;&gt;article&lt;/a&gt; there is no way to do truly fail-fast async error handling using only scala or scalaz.&lt;/p&gt;

&lt;p&gt;Look at the example below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val longFut = longFuture() // very long future
val shortFut = shortFuture()
val failedFut = failedFuture() // throw new IllegalStateException(&amp;quot;future is failed&amp;quot;)

val result = for {
  long &amp;lt;- longFut
  short &amp;lt;- shortFut
  failed &amp;lt;- failedFut
} yield {
  long + &amp;quot; | &amp;quot; + short + &amp;quot; | &amp;quot; + failed
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In that example we will wait all the futures until we get &lt;code&gt;IllegalStateException&lt;/code&gt; because &lt;code&gt;for-comprehension&lt;/code&gt; always handle futures in the order which we define them since Scala translates the example above to this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;longFut.flatMap { long =&amp;gt;
  shortFut.flatMap { short =&amp;gt;
    failedFut.map { failed =&amp;gt;
      long + &amp;quot; | &amp;quot; + short + &amp;quot; | &amp;quot; + failed
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But it is possible to avoid this problem with Expression library(&lt;a href=&#34;https://github.com/jedesah/computation-expressions&#34; title=&#34;Computation-expressions&#34;&gt;link&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Practical Scalaz: Make async operations with scalaz.Either and Futures</title>
      <link>http://coffius.github.io/posts/290071-make-async-with-scalaz-either-and-futures/</link>
      <pubDate>Sat, 05 Sep 2015 22:01:13 +0300</pubDate>
      
      <guid>http://coffius.github.io/posts/290071-make-async-with-scalaz-either-and-futures/</guid>
      <description>&lt;p&gt;Many of us know about such library as scalaz. For those who don&amp;rsquo;t know it is a library for functional programming in scala. You can find it &lt;a href=&#34;https://github.com/scalaz/scalaz&#34; title=&#34;Scalaz on github&#34;&gt;here&lt;/a&gt;.
Then I was trying to learn and understand this lib it was quite difficult to realize how exactly it can be used in a real code in a real system. I looked thought lots of articles about it, but there were only abstract examples. So I`ve decided to write a little example in order to show how scalaz can be used in a real system.&lt;/p&gt;

&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Idea:&lt;/strong&gt; Future and scalaz.Either can be used as a result of an asynchronous operation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reason:&lt;/strong&gt; We must compose futures and eithers in order to deal with possible errors which may occur during execution of async operations.&lt;/p&gt;

&lt;p&gt;For example we have to gather information from several different DBs and an external service like Twitter. We also don`t want to use exceptions as notifications about errors. Why? Because it sucks ^_^ It will be better if exceptions are used for something really exceptional. One more thing which we should implement is fail-fast error handling because it will be wasteful to continue program execution if it already contains some errors.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>